openapi: 3.0.0
info:
  version: 1.0.0
  title: Nexta API Documentation
  description: API Documentation for Nexta
servers:
  - url: http://localhost:3002
    description: Development Server
  - url: https://w11.eswe.dev
    description: Production Server

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Bearer with JWT Token'
  schemas:
    UserAttributes:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    PostAttributes:
      type: object
      properties:
        content:
          type: string
        userId:
          type: integer
    Comment:
      type: object
      properties:
        userId:
          type: integer
        postId:
          type: integer
        content:
          type: string
    Friendship:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the friendship.
        requesterId:
          type: integer
          description: ID of the user sending the friend request.
        requesteeId:
          type: integer
          description: ID of the user receiving the friend request.
        status:
          type: string
          enum: ['PENDING', 'ACCEPTED', 'DECLINED', 'BLOCKED']
          description: Status of the friendship.
paths:
  /v1/api/user/register:
    post:
      summary: Register a new user
      tags:
       - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error
        '500':
          description: Registration failed

  /v1/api/user/login:
    post:
      summary: User login
      tags:
       - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '400':
          description: Invalid email or password
        '500':
          description: Login failed

  /v1/api/user/account/{id}:
    get:
      security:
        - bearer: []
      summary: Retrieve user by ID
      tags:
       - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User retrieved successfully
        '401':
          description: Authentication error
        '403':
          description: No permission to view user data
        '404':
          description: User not found
        '500':
          description: Failed to fetch user

    put:
      security:
        - bearer: []
      summary: Update user by ID
      tags:
       - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAttributes'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Validation error
        '401':
          description: Authentication error
        '403':
          description: No permission to update user
        '404':
          description: User not found
        '500':
          description: Failed to update user

    delete:
      security:
        - bearer: []
      summary: Delete user by ID
      tags:
       - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Authentication error
        '403':
          description: No permission to delete user
        '404':
          description: User not found
        '500':
          description: Failed to delete user

  /v1/api/user/accounts:
    get:
      security:
        - bearer: []
      summary: Retrieve all users
      tags:
       - User
      responses:
        '200':
          description: Users retrieved successfully
        '500':
          description: Failed to retrieve users


  /v1/api/posts/create:
    post:
      security:
        - bearer: []
      summary: Create a new post
      tags:
       - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/PostAttributes'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAttributes'
        '500':
          description: Failed to create post

  /v1/api/posts/{postId}:
    get:
      security:
        - bearer: []
      summary: Retrieve a post by ID
      tags:
       - Post
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of post to fetch
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAttributes'
        '404':
          description: Post not found
        '500':
          description: Failed to fetch post
  /v1/api/posts/update/{postId}:
    put:
      security:
        - bearer: []
      summary: Update a post by ID
      tags:
       - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAttributes'
      responses:
        '200':
          description: Post updated successfully
        '404':
          description: Post not found
        '500':
          description: Failed to update post
  
  /v1/api/posts/delete/{postId}:
    delete:
      security:
        - bearer: []
      summary: Delete a post by ID
      tags:
       - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
        '500':
          description: Failed to delete post

  /v1/api/posts/user/{userId}:
    get:
      security:
        - bearer: []
      summary: Retrieve all posts of a user by userID
      tags:
       - Post
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostAttributes'
        '500':
          description: Failed to fetch posts

  /v1/api/posts/all:
    get:
      security:
        - bearer: []
      summary: Retrieve all posts
      tags:
       - Post
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostAttributes'
        '500':
          description: Failed to fetch posts

  /v1/api/comments/create:
    post:
      summary: Create a comment
      tags:
        - Comments
      requestBody:
        description: Comment data to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /v1/api/comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      responses:
        '200':
          description: Comment fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
  /v1/api/comments/post/{postId}:
    get:
      security:
        - bearer: []
      summary: Get a comment by Post ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      responses:
        '200':
          description: Comment fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
  
  /v1/api/comments/update/{id}:
    put:
      security:
        - bearer: []
      summary: Update a comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      requestBody:
        description: Comment data to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully
        '404':
          description: Comment not found
        '500':
          description: Internal server error
  /v1/api/comments/delete/{id}:
    delete:
      security:
        - bearer: []
      summary: Delete a comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
        '500':
          description: Internal server error

  /v1/api/friendships/add:
    post:
      security:
        - bearer: []
      summary: Create a friend request
      tags:
        - Friendships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requesterId:
                  type: integer
                  description: ID of the user sending the friend request.
                requesteeId:
                  type: integer
                  description: ID of the user receiving the friend request.
      responses:
        '201':
          description: Friend request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /v1/api/friendships/{id}:
    get:
      security:
        - bearer: []
      summary: Get a friendship by ID
      tags:
        - Friendships
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the friendship
          schema:
            type: integer
      responses:
        '200':
          description: Friendship fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
        '404':
          description: Friendship not found
  /v1/api/friendships/update/{id}:
    put:
      security:
        - bearer: []
      summary: Update friendship status
      tags:
        - Friendships
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the friendship
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ['PENDING', 'ACCEPTED', 'DECLINED', 'BLOCKED']
                  description: Status of the friendship.
                requesteeId:
                  type: integer
                  description: ID of the user receiving the friend request. This is also included in the body for additional validation or other use cases.
      responses:
        '200':
          description: Friendship status updated successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /v1/api/friendships/delete/{id}:
    delete:
      security:
        - bearer: []
      summary: Delete a friendship by ID
      tags:
        - Friendships
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the friendship
          schema:
            type: integer
      responses:
        '200':
          description: Friendship deleted successfully
        '404':
          description: Friendship not found
        '500':
          description: Internal server error

  /v1/api/friendships/status:
    get:
      security:
        - bearer: []
      summary: Get friendships by status
      tags:
        - Friendships
      parameters:
        - name: status
          in: query
          required: true
          description: Status of the friendships to be fetched
          schema:
            type: string
            enum: ['PENDING', 'ACCEPTED', 'DECLINED', 'BLOCKED']
      responses:
        '200':
          description: Friendships fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friendship'
        '404':
          description: No friendships found for the provided status
        '500':
          description: Internal server error
